package com.gl.employeemanagementsystem.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.gl.employeemanagementsystem.entity.Employee;
import com.gl.employeemanagementsystem.repository.EmployeeRepository;

@Service // This means that this class is a service
public class EmployeeService {
	@Autowired
	// This means to get the bean which is auto-generated by Spring
	// We will use it to handle the data
	EmployeeRepository employeeRepository;

	//	get all employees
	public List<Employee> getAllEmployees() {

		//		find all employees data, then return it
		return employeeRepository.findAll();
	}

	// save an employee
	public void saveEmployee(Employee emp) {
		//		save employee data to database
		employeeRepository.save(emp);
	}

	//	get employee by id
	public Employee getEmployeeById(Long id) {
		//		find an employee by id
		Employee emp = employeeRepository.getById(id);

		//		if there is not an employee who has the id, throw the error.
		if (emp == null) {
			throw new RuntimeException("Employee not found");
		}
		return emp;
	}

	//	delete employee by id
	public String deleteEmployeeById(Long id) {
		//		find an employee by id
		Employee emp = employeeRepository.getById(id);

		//		if there is not an employee who has the id, throw the error.
		if (emp == null) {
			throw new RuntimeException("Employee not found");
		}

		//		delete an employee who has the id from the database
		employeeRepository.deleteById(id);
		return "Deleted: " + emp.getFirstName() + " " + emp.getLastName();
	}

	public String searchBy(String firstName) {
		String name = null;
		List<Employee> emp = employeeRepository.findAll();
		for(Employee e : emp) {
			if(e.getFirstName()==firstName) {
				name = firstName;
				return name;			
			}
			else {
				throw new RuntimeException("Employee not found");
			}
		}
		return name;
	}
	
	public Page<Employee> findPaginated(int pageNo, int pageSize, String sortField, String sortDirection){
		Sort sort = sortDirection.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortField).ascending() :
			Sort.by(sortField).descending();
		
		Pageable pageable = PageRequest.of(pageNo - 1, pageSize, sort);
		return this.employeeRepository.findAll(pageable);
	}
	
}
